package controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.servlet.RequestDispatcher;
import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import dto.BookVO;
import dto.CartVO;
import dto.MemberVO;
import dto.OrderVO;
import service.BookService;
import service.CartService;
import service.OrderService;

/**
 * Servlet implementation class BoardController
 */
@WebServlet("/book/*")
public class ProductController extends HttpServlet {
	//   private static final long serialVersionUID = 1L;

	BookVO bookVO; // 교재정보 객체
	CartVO cartVO; // 장바구니 객체
	OrderVO orderVO; // 주문정보 객체
	
	BookService bookService;
	CartService cartService;
	OrderService orderService;

	/**
	 * @see Servlet#init(ServletConfig)
	 */
	public void init(ServletConfig config) throws ServletException {
		// TODO Auto-generated method stub			

		bookVO = new BookVO();
		cartVO = new CartVO();
		orderVO = new OrderVO();
		
		bookService = new BookService();
		cartService = new CartService();
		orderService = new OrderService();
		
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doHandle(request,response);

	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doHandle(request,response);
	}

	private void doHandle(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		String nextPage = "";
		request.setCharacterEncoding("utf-8");
		response.setContentType("text/html;charset=utf-8");
		String action = request.getPathInfo();

		try {
			
    		HttpSession session = request.getSession();
			MemberVO loginUser = (MemberVO) session.getAttribute("loginUser"); 
			
			if(action != null && action.equals("/cart.do")) { // 장바구니 화면으로 이동시 수행

				System.out.println("cart.do");  
				
				ArrayList<CartVO> cartList = cartService.selectCartList(loginUser.getId());
				
				request.setAttribute("cartList", cartList); 
				
				nextPage = "/Category/Book/cart.jsp"; // nextPage : 장바구니 화면으로 이동

			} else if (action.equals("/cartDelete.do")) { // 장바구니 화면에서 삭제[X]버튼 클릭시
				
				System.out.println("book/cartDelete.do");
				
				int cseq = Integer.parseInt(request.getParameter("cseq"));
				
				cartService.deleteList(cseq);

				nextPage = "/book/cart.do";
				
			} else if (action.equals("/cartUpdate.do")) { // 장바구니 화면에서 [수량] 변경시
				
				System.out.println("book/cartUpdate.do");
				
				int cseq = Integer.parseInt(request.getParameter("cseq"));
				int quantity = Integer.parseInt(request.getParameter("quantity"));
				int salePrice = Integer.parseInt(request.getParameter("salePrice"));
				
				cartService.updateList(cseq, quantity,salePrice);
				
				nextPage = "/book/cart.do";
				
			} else if (action.equals("/cartInsert.do")) { // [장바구니 담기] 버튼 클릭시
				
				System.out.println("book/cartInsert.do");
				
				System.out.println("bseq : " + request.getParameter("bseq"));
				String message;
				
				int bseq = Integer.parseInt(request.getParameter("bseq"));
				
				boolean result = cartService.confirmList(loginUser.getId(), bseq);
						
				if(result) { //장바구니에 교재가 존재하지 않을때(추가)
					
					String title = request.getParameter("title");
					int price = Integer.parseInt((request.getParameter("price")));
					int salePrice = Integer.parseInt((request.getParameter("salePrice")));
					int quantity = Integer.parseInt((request.getParameter("quantity")));
					String imgUrl = request.getParameter("imgUrl");
					int amountPrice = salePrice*quantity;
					String publisher = request.getParameter("publisher");
					
					cartVO.setId(loginUser.getId());
					cartVO.setTitle(title);
					cartVO.setPrice(price);
					cartVO.setSalePrice(salePrice);
					cartVO.setQuantity(quantity);
					cartVO.setAmountPrice(amountPrice);
					cartVO.setImgUrl(imgUrl);
					cartVO.setPublisher(publisher);
					cartVO.setBseq(bseq);
					
					cartService.addList(cartVO);
					
					message = "pass";
					
				} else { //장바구니에 교재가 이미 존재할때
					
					message = "fail";
					
				}
				
				request.setAttribute("message", message);
				
				nextPage = "/book/buybook.do";
				
			} else if (action.equals("/buybook.do")) { 
				
				System.out.println("book/buybook.do");
				
				ArrayList<BookVO> bookList = bookService.selectBookList();
				request.setAttribute("bookList", bookList);
				
				nextPage = "/Category/Book/buybook.jsp";
			
			} else if (action.equals("/order.do")) {  
				
				System.out.println("book/order.do");
				
				// 세션 회원정보 받기
				ArrayList<CartVO> cartList = cartService.selectCartList(loginUser.getId()); //장바구니 리스트
				orderVO = orderService.selectPrice(loginUser.getId()); //상품금액(총상품금액,총할인금액,총결제금액)
				orderVO.setUserName(loginUser.getName());
				orderVO.setOrderName(loginUser.getName());
				orderVO.setAddress(loginUser.getAddress());
				orderVO.setPhoneNumber(loginUser.getPhone());
				
				request.setAttribute("cartList", cartList);
				request.setAttribute("orderVO", orderVO);
				
				nextPage = "/Category/Book/order.jsp";
				
			} else if (action.equals("/completed.do")) {  
				
				System.out.println("book/completed.do");
				
				String name = request.getParameter("name"); //받는사람(orderName)
				String[] phoneNumArray = request.getParameterValues("phoneNumber"); 
											  /*.getParameterValues() : 복수값 반환(배열)
												.getParameter() : 단일값 반환 */
				String phoneNumber = ""; //휴대폰번호(phoneNumber)
				String address = request.getParameter("address"); //주소(address)
				String shippingDemand = request.getParameter("shippingDemand"); //배송시요청사항(shippingDemand)
				String depositBank = request.getParameter("depositBank"); //입금은행(depositBank)
				String depositNumber = request.getParameter("depositNumber"); //입금계좌(depositNumber)
				
				
				System.out.println();
				System.out.println("request.getParameter(name) : " + request.getParameter("name")); //받는사람이름
				System.out.println("request.getParameter(address) : " + request.getParameter("address")); //주소
				System.out.println("request.getParameter(shippingDemand) : " + request.getParameter("shippingDemand")); //배송시 요청사항
				System.out.println("request.getParameter(shippingInput) : " + request.getParameter("shippingInput")); //배송시요청사항 직접입력 태그
				System.out.println("request.getParameter(depositBank) : " + request.getParameter("depositBank")); //입금은행
				System.out.println("request.getParameter(depositNumber) : " + request.getParameter("depositNumber")); //입금계좌
				System.out.println("phoneNumArray : " + Arrays.toString(phoneNumArray)); //휴대폰번호
				System.out.println();
				
				orderVO.setId(loginUser.getId()); //아이디
				orderVO.setOrderName(name); //받는사람(orderName)
				orderVO.setAddress(address); //주소(address)
				if(shippingDemand.equals("배송시 요청사항 선택")) {
					shippingDemand = null;
				} else if (shippingDemand.equals("직접입력")) {
					shippingDemand = request.getParameter("shippingInput");
				}
				orderVO.setShippingDemand(shippingDemand); //배송시요청사항(shippingDemand)
				
				orderVO.setDepositBank(depositBank); //입금은행(depositBank)
				orderVO.setDepositNumber(depositNumber); //입금계좌(depositNumber)
				
				for(int i=0; i<phoneNumArray.length; i++) {
					phoneNumber += phoneNumArray[i];
				}
				orderVO.setPhoneNumber(phoneNumber); //휴대폰번호(phoneNumber)
				
				System.out.println("orderVO.getOrderName() : " + orderVO.getOrderName()); //OrderName
				System.out.println("orderVO.getPhoneNumber() : " + orderVO.getPhoneNumber()); //PhoneNumber
				System.out.println("orderVO.getAddress() : " + orderVO.getAddress()); //Address
				System.out.println("orderVO.getShippingDemand() : " + orderVO.getShippingDemand()); //ShippingDemand
				System.out.println("orderVO.getDepositBank() : " + orderVO.getDepositBank()); //DepositBank
				System.out.println("orderVO.getDepositNumber() : " + orderVO.getDepositNumber()); //DepositNumber
				System.out.println("orderVO.getAllPrice() : " + orderVO.getAllPrice()); //AllPrice
				System.out.println("");
				
				
				request.setAttribute("orderVO", orderVO);
				
				ArrayList<CartVO> cartList = cartService.selectCartList(loginUser.getId()); //장바구니 리스트
				
				orderService.addOrderList(orderVO,cartList); //orderList테이블 추가
				
				cartService.resultChange(loginUser.getId());//result값 변경함수
				
				////////////////////////////// cartList
				
				nextPage = "/Category/Book/completed.jsp";
				
			} else {
				
				System.out.println("book/buybook.do");
				
				ArrayList<BookVO> bookList = bookService.selectBookList();
				request.setAttribute("bookList", bookList);
				
				nextPage = "/Category/Book/buybook.jsp";
			}
			
			RequestDispatcher dispatch = request.getRequestDispatcher(nextPage);
			dispatch.forward(request, response);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}