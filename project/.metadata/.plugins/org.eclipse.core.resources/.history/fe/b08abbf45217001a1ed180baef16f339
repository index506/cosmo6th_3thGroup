package controller;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import dto.PostVO;
import service.BoardService;

@WebServlet("/board/*")
public class BoardController extends HttpServlet {
	// 이미지 업로드 경로
	private static String ARTICLE_IMAGE_PATH = "C:\\myJSP\\wokrspace\\Project09\\WebContent\\imageFolder\\article_image";

	/* 참조 변수 */
	BoardService boardService;
	PostVO postVO;
	
    public BoardController() {
		boardService = new BoardService();
		postVO = new PostVO();
    }

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doHandle(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doHandle(request, response);
	}

	private void doHandle(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException  {
		String nextPage = ""; // forward 경로를 담기 위한 변수
		request.setCharacterEncoding("utf-8"); // 다른 페이지로부터 요청(request)받을 때의 인코딩 방식
		response.setContentType("text/html; charset=utf-8"); // 다른 페이지에 응답(response) 보낼때의 charset
		String action = request.getPathInfo(); // servlet 매핑 주소인 "~/test" 뒤의 정보 (servlet 경로나 ~.do)
		System.out.println("action : " + action);

		try { /* 동작 MODE */
			if (action != null) { // equals 계열은 null 일때 null 익셉션 발생 -> try catch 발생함으로, action != null 처리
				switch (action) {
				case "/2": { // <>

					nextPage = "/Category/Board/.jsp";
					RequestDispatcher dispatch = request.getRequestDispatcher(nextPage);
					dispatch.forward(request, response);
					break;
				} // end of <시험풀기>
				
				
				case "/writeFormPost.do": { // <게시글 쓰기 화면>	
					/* 데이터 받기  */
					String board_category = request.getParameter("board_category");
					System.out.println(board_category);
					String title = util.Conversion.boardCategory(board_category); // 게시판 제목
					System.out.println(title);
					
					/* 게시글 쓰기 화면으로 포워드 */
					request.setAttribute("title", title);
					request.setAttribute("board_category", board_category);
					nextPage = "/Category/Board/writeForm.jsp";
					RequestDispatcher dispatch = request.getRequestDispatcher(nextPage);
					dispatch.forward(request, response);
					break;
				} // end of <기록생성>
				
				case "/readPost.do": { // <게시글 읽기>
					/* 데이터 받기  */
					String board_category = request.getParameter("board_category");
					int num = Integer.parseInt(request.getParameter("num"));
					String title = util.Conversion.boardCategory(board_category); // 게시판 제목
					System.out.println(title);
					
					/* DB에서 해당 번호의 게시글 가져오기 (현재/이전/다음) */
					PostVO postVO0 = boardService.readPost(board_category, num); // 현재 게시글
					PostVO postVO1 = boardService.readPost(board_category, num-1); // 이전 게시글
					PostVO postVO2 = boardService.readPost(board_category, num+1); // 다음 게시글
					
					PostVO[] postVO = new PostVO[3];  
					postVO[0] = postVO0;
					postVO[1] = postVO1;
					postVO[2] = postVO2;
					
					/* 게시글 읽기 화면으로 포워드 */
					request.setAttribute("title", title);
					request.setAttribute("board_category", board_category);
					request.setAttribute("postVO", postVO);
					nextPage = "/Category/Board/postRead.jsp";
					RequestDispatcher dispatch = request.getRequestDispatcher(nextPage);
					dispatch.forward(request, response);
					break;
				} // end of <게시글 읽기>
				
				case "/questionList.do": { // <게시글 목록 - 질문 게시판>
					/* DB에서 게시글 목록 가져오기 */
					String board_category = "question_List";
					List<PostVO> postsList = boardService.listPosts(board_category); // DB에서 게시글 목록 받아오기
					
					/* 질문 게시판 화면으로 포워드 */
					request.setAttribute("postsList", postsList);
					nextPage = "/Category/Board/listQuestion.jsp";
					RequestDispatcher dispatch = request.getRequestDispatcher(nextPage);
					dispatch.forward(request, response);
					break;
				} // end of <게시글 목록 - 질문 게시판>
				
				case "/communityList.do": { // <게시글 목록 - 자유 게시판>
					/* DB에서 게시글 목록 가져오기 */
					String board_category = "community_List";
					List<PostVO> postsList = boardService.listPosts(board_category); // DB에서 게시글 목록 받아오기
					
					/* 자유 게시판 화면으로 포워드 */
					request.setAttribute("postsList", postsList);
					nextPage = "/Category/Board/listCommunity.jsp";
					RequestDispatcher dispatch = request.getRequestDispatcher(nextPage);
					dispatch.forward(request, response);
					break;
				} // end of <게시글 목록 - 자유 게시판>
				
				case "/noticeList.do": default: { // <게시글 목록 - 공지사항>
					/* DB에서 게시글 목록 가져오기 */
					String board_category = "notice_List";
					List<PostVO> postsList = boardService.listPosts(board_category); // DB에서 게시글 목록 받아오기
					
					/* 공지사항 화면으로 포워드 */
					request.setAttribute("postsList", postsList);
					nextPage = "/Category/Board/listNotice.jsp";
					RequestDispatcher dispatch = request.getRequestDispatcher(nextPage);
					dispatch.forward(request, response);
					break;
				} // end of <게시글 목록 - 공지사항>

				} // end of switch
			} // end of if

		} catch (Exception e) {
			e.printStackTrace();
		}
		
	} // end of doHandle()
	
}
